/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author cunbidun
 */

#include <bits/stdc++.h>

#define F first
#define S second
#define pb push_back
#define mp make_pair
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
#define watch(x) out << (#x) << " = " << (x) << endl
#define rf(i, a, b) for(int (i) = (a); (i) <= (b); (i)++)
#define rb(i, b, a) for(int (i) = (b); (i) >= (a); (i)--)

using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef pair<int, int> ii;
typedef pair<ii, int> iii;
typedef vector<ii> vii;

const int N = 1e6 + 1;

class Task623B {
public:
    vi lp;
    vi pr;
    int n;
    ll a, b;
    ll ans = 1e18;
    vi num;


    bool c(int i, int x) {
        return (i + 1) % x == 0 || (i - 1) % x == 0 || i % x == 0;
    }


    void cal(int x) {
        ll f[n + 1][3];
        rf(i, 0, n)rf(j, 0, 2)f[i][j] = 1e18;
        f[0][0] = 0;
        rf(i, 1, n) {
            if (c(num[i], x)) {
                f[i][0] = f[i - 1][0] + (num[i] % x != 0) * b;
                f[i][2] = min(f[i - 1][1], f[i - 1][2]) + (num[i] % x != 0) * b;
            }
            f[i][1] = min(f[i - 1][1], f[i - 1][0]) + a;
        }
        ans = min(ans, f[n][0]);
        ans = min(ans, f[n][1]);
        ans = min(ans, f[n][2]);
    }

    void solve(int x) {
        for (int i = 2; i * i <= x; i++) {
            if (x % i == 0) {
                cal(i);
                while (x % i == 0)x /= i;
            }
        }
        if (x > 1) cal(x);
    }

    void solve(istream &in, ostream &out) {
        in >> n >> a >> b;
        num.assign(n + 1, 0);
        rf(i, 1, n)in >> num[i];
//        cal(3);
        rf(i, num[1] - 1, num[1] + 1)solve(i);
        rf(i, num[n] - 1, num[n] + 1)solve(i);
        out << ans << "\n";
    }
};

class TestCase {
public:
    static constexpr int numTest = 0;
    static constexpr bool haveAns = false;

    static void generateTest(ostream &test) {
    }

    static void solve(istream &in, ostream &out) {
    }
};

class Checker {
public:
    static constexpr double arg = 0.0;

    static bool check(istream &in, istream &out) {
    }
};



int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    Task623B solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    out << fixed << setprecision(10);
    solver.solve(in, out);
    return 0;
}