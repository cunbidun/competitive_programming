/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author cunbidun
 */

#include <bits/stdc++.h>

#define pb push_back
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
#define mp make_pair
#define rf(i, a, b) for(int (i) = (a); (i) <= (b); (i)++)
#define rb(i, b, a) for(int (i) = (b); (i) >= (a); (i)--)
#define watch(x) out << (#x) << " = " << (x) << endl

using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef pair<int, int> ii;
typedef vector<ii> vii;

const int N = 2e5 + 1;

class Task743D {
public:
    int n;
    vi a[N];
    ll sum[N];
    ll f[N];
    int num[N];
    ll ans = (ll) -1e15;

    ll dfs(int u, int l) {
        sum[u] = num[u];
        for (int v: a[u])
            if (v != l) {
                sum[u] += dfs(v, u);
            }
        return sum[u];
    }

    void sol(int u, int l) {
        if (u != l && sz(a[u]) == 1) {
            f[u] = sum[u];
            return;
        }
        int cnt = 0;
        ll max1 = -1e15, max2 = -1e15;
        for (int v:a[u]) {
            if (v != l) {
                cnt++;
                sol(v, u);
                if (max1 <= f[v]) {
                    max2 = max1;
                    max1 = f[v];
                } else
                    max2 = max(max2, f[v]);
            }
        }
        f[u] = max(sum[u], max1);
        if (cnt > 1) {
            ans = max(ans, max1 + max2);
        }
    }


    void solve(istream &in, ostream &out) {
        in >> n;
        rf(i, 1, n) {
            in >> num[i];
            f[i] = -1e15;
        }
        rf(i, 1, n - 1) {
            int u, v;
            in >> u >> v;
            a[u].pb(v);
            a[v].pb(u);
        }
        dfs(1, 1);
        sol(1, 1);
        if (ans == -1e15) {
            out << "Impossible" << "\n";
        } else out << ans << "\n";
    }

};

class TestCase {
public:
    static constexpr bool printWAOnly = false;
    static constexpr int numTest = 0;
    static constexpr bool haveAns = false;

    static void generateTest(ostream &test) {
    }

    static void solve(istream &in, ostream &out) {
    }
};

class Checker {
public:
    static constexpr double arg = 0.0;

    static bool check(istream &in, istream &out) {
    }
};



int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
   	Task743D solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    out << fixed << setprecision(10);
	solver.solve(in, out);
	return 0;
}