/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author cunbidun
 */

#include <bits/stdc++.h>

#define F first
#define S second
#define pb push_back
#define mp make_pair
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
#define watch(x) out << (#x) << " = " << (x) << endl
#define rf(i, a, b) for(int (i) = (a); (i) <= (b); (i)++)
#define rb(i, b, a) for(int (i) = (b); (i) >= (a); (i)--)

using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef pair<int, int> ii;
typedef pair<ii, int> iii;
typedef vector<ii> vii;

const int N = 2e5 + 1;
const int MOD = 1e9 + 7;
const int INF = 2e9;

class Task975C {
public:
    void solve(istream &in, ostream &out) {
        int n, q;
        in >> n >> q;
        vector<ll> s(n + 1);
        rf(i, 1, n) {
            int tmp;
            in >> tmp;
            s[i] = s[i - 1] + tmp;
        }
        ll sum = 0;
        while (q--) {
            ll k;
            in >> k;
            sum += k;
            int l = 0, r = n;
            while (l != r) {
                if (l + 1 == r) {
                    if (s[r] <= sum) l = r;
                    else break;
                }
                int m = (l + r) >> 1;
                if (s[m] > sum) r = m - 1;
                else l = m;
            }
            if (l == n) {
                out << n << "\n";
                sum = 0;
            }
            else {
                out << n - l << "\n";
            }
        }
    }
};

class TestCase {
public:
    static constexpr int numTest = 0;
    static constexpr bool haveAns = false;

    static void generateTest(ostream &test) {
    }

    static void solve(istream &in, ostream &out) {
    }
};

class Checker {
public:
    static constexpr double arg = 0.0;

    static bool check(istream &in, istream &out) {
    }
};



int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    Task975C solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    out << fixed << setprecision(10);
    solver.solve(in, out);
    return 0;
}