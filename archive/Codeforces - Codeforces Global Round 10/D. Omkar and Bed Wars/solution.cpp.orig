#include <bits/stdc++.h>

#define sz(v) ((int)(v).size())
#define all(v) (v).begin(), (v).end()

using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef pair<int, int> ii;

const int N = 2e5 + 5;
const int INF = 2e9 + 5;
string s;
int n, a[N];
ll f[N][2][2];

int cal(int ff, int ss) {
  for (int i = 1; i <= n; i++) {
    f[i][1][1] = INF;
    f[i][0][0] = INF;
    f[i][1][0] = INF;
    f[i][0][1] = INF;
  }
  f[1][ff][1] = (a[1] != ff);
  f[1][ff][0] = (a[1] != ff);
  if (ff == ss) {
    f[2][1 - ss][ff] = (a[2] != (1 - ss)) + f[1][ff][1];
  } else {
    f[2][1][ff] = (a[2] != 1) + f[1][ff][0];
    f[2][0][ff] = (a[2] != 0) + f[1][ff][0];
  }
  for (int i = 3; i <= n - 1; i++) {
    if (i == n - 1 && ss == ff) {
      break;
    }
    f[i][0][0] = min(f[i][0][0], f[i - 1][0][1] + (a[i] != 0));
    f[i][0][1] = min(f[i][0][1], f[i - 1][1][0] + (a[i] != 0));
    f[i][0][1] = min(f[i][0][1], f[i - 1][1][1] + (a[i] != 0));

    f[i][1][0] = min(f[i][1][0], f[i - 1][0][1] + (a[i] != 1));
    f[i][1][0] = min(f[i][1][0], f[i - 1][0][0] + (a[i] != 1));
    f[i][1][1] = min(f[i][1][1], f[i - 1][1][0] + (a[i] != 1));
  }
  if (ff == ss) {
    if (ss == 0) {
      f[n - 1][1][0] = min(f[n - 1][1][0], (a[n - 1] != 1) + f[n - 2][0][1]);
      f[n - 1][1][0] = min(f[n - 1][1][0], (a[n - 1] != 1) + f[n - 2][0][0]);
      f[n - 1][1][1] = min(f[n - 1][1][1], (a[n - 1] != 1) + f[n - 2][1][0]);
    }
    if (ss == 1) {
      cout << "!!!" << "\n";
  cout << f[n - 2][1][0] << "\n";

      f[n - 1][0][0] = min(f[n - 1][0][0], (a[n - 1] != 0) + f[n - 2][0][1]);
      f[n - 1][0][1] = min(f[n - 1][0][1], (a[n - 1] != 0) + f[n - 2][1][0]);
      f[n - 1][0][1] = min(f[n - 1][0][1], (a[n - 1] != 0) + f[n - 2][1][1]);
    }
  }
  if (ss == 1) {
    f[n][1][0] = min(f[n - 1][1][0], (a[n] != 1) + f[n - 1][0][1]);
    f[n][1][0] = min(f[n - 1][1][0], (a[n] != 1) + f[n - 1][0][0]);
    f[n][1][1] = min(f[n - 1][1][1], (a[n] != 1) + f[n - 1][1][0]);
  } else {
    f[n][0][0] = min(f[n - 1][0][0], (a[n] != 0) + f[n - 1][0][1]);
    f[n][0][1] = min(f[n - 1][0][1], (a[n] != 0) + f[n - 1][1][0]);
    f[n][0][1] = min(f[n - 1][0][1], (a[n] != 0) + f[n - 1][1][1]);
  }
  return min(f[n][ss][0], f[n][ss][1]);
}

int solve() {
  cin >> n;
  for (int i = 1; i <= n; i++) {
    char x;
    cin >> x;
    if (x == 'R') {
      a[i] = 1;
    } else {
      a[i] = 0;
    }
  }
  int ans = INF;
  ans = min(ans, cal(1, 1));
  // ans = min(ans, cal(1, 0));
  // ans = min(ans, cal(0, 1));
  // ans = min(ans, cal(0, 0));
  cout << ans << "\n";
}

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  int t;
  cin >> t;
  while (t--) {
    solve();
  }
}