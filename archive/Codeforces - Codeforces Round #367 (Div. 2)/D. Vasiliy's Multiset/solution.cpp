/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author cunbidun
 */

#include <bits/stdc++.h>

#define pb push_back
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
#define mp make_pair
#define rf(i, a, b) for(int (i) = (a); (i) <= (b); (i)++)
#define rb(i, b, a) for(int (i) = (b); (i) >= (a); (i)--)
#define watch(x) out << (#x) << " = " << (x) << endl

using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef pair<int, int> ii;
typedef vector<ii> vii;

const int N = 2e5 + 1;
const int MOD = 1e9 + 7;

class Task706D {

public:
    class Node {
    public:
        Node *link[2];
        int cnt = 0;
    };

    Node *root = new Node();

    void add(int num) {
        Node *cur = root;
        for (int i = 30; i >= 0; i--) {
            cur->cnt++;
            int next = (num >> i) & 1;
            if (cur->link[next] == nullptr) cur->link[next] = new Node();
            cur = cur->link[next];
        }
        cur->cnt++;
    }

    void remove(int num) {
        Node *cur = root;
        cur->cnt--;

        for (int i = 30; i >= 0; i--) {
            int next = (num >> i) & 1;
            cur = cur->link[next];
            cur->cnt--;
        }
    }

    int sol(int num) {
        Node *cur = root;
        int ans = 0;
        for (int i = 30; i >= 0; i--) {
            int next = (num >> i) & 1;
            if (cur->link[1 - next] != nullptr && cur->link[1 - next]->cnt != 0) {
                ans += (1 << i);
                cur = cur->link[1 - next];
            } else if (cur->link[next] != nullptr && cur->link[next]->cnt != 0) {
                cur = cur->link[next];
            } else break;
        }
        return ans;
    }

    void solve(istream &in, ostream &out) {
        int n;
        in >> n;
        add(0);
        rf(i, 1, n) {
            char c;
            int num = 0;
            in >> c >> num;
            if (c == '+')
                add(num);
            else if (c == '-')
                remove(num);
            else out << sol(num) << "\n";
        }
    }
};

class TestCase {
public:
    static constexpr bool printWAOnly = false;
    static constexpr int numTest = 0;
    static constexpr bool haveAns = false;

    static void generateTest(ostream &test) {
    }

    static void solve(istream &in, ostream &out) {
    }
};

class Checker {
public:
    static constexpr double arg = 0.0;

    static bool check(istream &in, istream &out) {
    }
};



int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
   	Task706D solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    out << fixed << setprecision(10);
	solver.solve(in, out);
	return 0;
}