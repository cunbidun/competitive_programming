/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author cunbidun
 */

#include <bits/stdc++.h>

#define F first
#define S second
#define pb push_back
#define mp make_pair
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
#define watch(x) out << (#x) << " = " << (x) << endl
#define rf(i, a, b) for(int (i) = (a); (i) <= (b); (i)++)
#define rb(i, b, a) for(int (i) = (b); (i) >= (a); (i)--)

using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef pair<int, int> ii;
typedef pair<ii, int> iii;
typedef vector<ii> vii;

const int N = 2e5 + 1;
const int MOD = 1e9 + 7;
const int INF = 2e9;

class Task758C {
public:
    void solve(istream &in, ostream &out) {
        int n, m;
        in >> n >> m;
        ll k;
        in >> k;
        int x, y;
        in >> x >> y;
//        if (n == 1 || n == 2) {
//            int p = (x - 1) * m + y;
//            if (k % (n * m) == 0) out << k / (n * m) << " " << k / (n * m) << " " << k / (n * m) << "\n";
//            else {
//                out << k / (n * m) + 1 << " " << k / (n * m) << " ";
//                if (k % (n * m) >= p) out << k / (n * m) + 1 << "\n";
//                else out << k / (n * m) << "\n";
//            }
//            return;
//        }
        int tot = n * m + max(0, (n - 2)) * m;
        ll a[n + 1][m + 1];
        rf(i, 1, n)
            rf(j, 1, m) {
                if (1 < i && i < n) a[i][j] = 2 * (k / tot);
                else a[i][j] = k / tot;
            }
        int r = k % tot;
        ll mx = 0, mi = 1e18;
        rf(i, 1, n) {
            rf(j, 1, m) {
                if (r == 0) break;
                a[i][j]++;
                r--;
            }
            if (r == 0) break;
        }
        rb(i, n - 1, 1) {
            rf(j, 1, m) {
                if (r == 0) break;
                a[i][j]++;
                r--;
            }
            if (r == 0) break;
        }
        rf(i, 1, n)
            rf(j, 1, m) {
                mx = max(mx, a[i][j]);
                mi = min(mi, a[i][j]);
            }
        out << mx << " " << mi << " " << a[x][y] << "\n";
    }
};

class TestCase {
public:
    static constexpr int numTest = 0;
    static constexpr bool haveAns = false;

    static void generateTest(ostream &test) {
    }

    static void solve(istream &in, ostream &out) {
    }
};

class Checker {
public:
    static constexpr double arg = 0.0;

    static bool check(istream &in, istream &out) {
    }
};



int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    Task758C solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    out << fixed << setprecision(10);
    solver.solve(in, out);
    return 0;
}