/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author cunbidun
 */

#include <bits/stdc++.h>

using namespace std;


class Trie {

    class Node {
    public:
        Node *link[2];
    };

public:
    Node *root;

    Trie() {
        root = new Node();
    }

    void add(int tmp) {
        Node *cur = root;
        for (int i = 29; i >= 0; i--) {
            int c = ((tmp >> i) & 1);
            if (cur->link[c] == nullptr) cur->link[c] = new Node();
            cur = cur->link[c];
        }
    }

    int solve(Node node, int lvl) {
        if (node.link[1] == nullptr && node.link[0] == nullptr) return 0;
        int res = 0;
        if (node.link[1] != nullptr && node.link[0] != nullptr) {
            res += (1 << lvl);
            res += min(solve(*node.link[1], lvl - 1), solve(*node.link[0], lvl - 1));
        } else {
            if (node.link[1] != nullptr) res += solve(*node.link[1], lvl - 1);
            if (node.link[0] != nullptr) res += solve(*node.link[0], lvl - 1);
        }
        return res;
    }
};

class Task1285D {
public:
    void solve(std::istream &in, std::ostream &out) {
        int n;
        in >> n;
        Trie trie;
        for (int i = 1; i <= n; i++) {
            int tmp;
            in >> tmp;
            trie.add(tmp);
        }
        out << trie.solve(*trie.root, 29) << "\n";
    }
};


int main() {
    Task1285D solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}