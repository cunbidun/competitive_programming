/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author cunbidun
 */

#include <bits/stdc++.h>

#define F first
#define S second
#define pb push_back
#define mp make_pair
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
#define watch(x) out << (#x) << " = " << (x) << endl
#define rf(i, a, b) for(int (i) = (a); (i) <= (b); (i)++)
#define rb(i, b, a) for(int (i) = (b); (i) >= (a); (i)--)

using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef pair<int, int> ii;
typedef pair<ii, int> iii;
typedef vector<ii> vii;

const int N = 2e5 + 1;
const int MOD = 1e9 + 7;
const int INF = 2e9;

class Task1074A {
public:
    void solve(istream &in, ostream &out) {
        int n, m;
        in >> n >> m;
        vi a(n);
        rf(i, 0, n - 1) in >> a[i];
        a.pb(1e9);
        sort(all(a));
        vi b;
        rf(i, 0, m - 1) {
            int x1, x2, y;
            in >> x1 >> x2 >> y;
            if (x1 == 1) b.pb(x2);
        }
        sort(all(b));
        int p = 0;
        int ans = INF;
//        rf(i, 0, sz(b) - 1) if (b[i] >= a[0])ans++;

        rf(i, 0, sz(a) - 1) {
            while (p < sz(b) && b[p] < a[i]) p++;
            ans = min(ans, i + sz(b) - p);
        }
        out << ans << "\n";
    }
};

class TestCase {
public:
    static constexpr int numTest = 0;
    static constexpr bool haveAns = false;

    static void generateTest(ostream &test) {
    }

    static void solve(istream &in, ostream &out) {
    }
};

class Checker {
public:
    static constexpr double arg = 0.0;

    static bool check(istream &in, istream &out) {
    }
};



int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    Task1074A solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    out << fixed << setprecision(10);
    solver.solve(in, out);
    return 0;
}