#include <bits/stdc++.h>

using namespace std;

template <class c> struct rge { c b, e; };
template <class c> rge<c> range(c i, c j) { return rge<c>{i, j}; }
template <class c> auto dud(c *x) -> decltype(cerr << *x, 0);
template <class c> char dud(...);
struct debug {
#ifdef LOCAL
  ~debug() { cout << endl; }
  template <class c>
  typename enable_if<sizeof dud<c>(0) != 1, debug &>::type operator<<(c i) {
    cout << boolalpha << i;
    return *this;
  }
  template <class c>
  typename enable_if<sizeof dud<c>(0) == 1, debug &>::type operator<<(c i) {
    return *this << range(begin(i), end(i));
  }
  template <class c, class b> debug &operator<<(pair<b, c> d) {
    return *this << "(" << d.first << ", " << d.second << ")";
  }
  template <class c> debug &operator<<(rge<c> d) {
    *this << "[";
    for (auto it = d.b; it != d.e; ++it) {
      *this << ", " + 2 * (it == d.b) << *it;
    }
    return *this << "]";
  }
#else
  template <class c> debug &operator<<(const c &) { return *this; }
#endif
};
#define imie(...) "[" << #__VA_ARGS__ ": " << (__VA_ARGS__) << "] "

class RedGreenBlueLight {
public:
  vector<int> move(vector<int> steps) {
    int MX = 1000;
    int N = steps.size();
    vector<int> mp(MX + 1);
    for (int i : steps) {
      mp[min(i, 999)]++;
    }
    for (int i = MX; i >= 1; i--) {
      mp[i - 1] += mp[i] / 3;
    }
    if (mp[0] == 0) {
      return vector<int>{-1};
    }
    vector<array<int, 2>> a;
    for (int i = 0; i < N; i++) {
      a.push_back({steps[i], i});
    }
    sort(a.begin(), a.end());
    vector<int> ans(N);
    int pos = 0;
    int cnt = 1;

    for (int i = 0; i < N; i++) {
      // test the prefix
      mp.assign(MX + 1, 0);
      for (int j = i; j >= pos; j--) {
        mp[a[j][0]]++;
      }
      for (int j = MX; j >= 2; j--) {
        mp[j - 1] += mp[j] / 3;
      }
      if (mp[1] == 1) {
        for (int j = i; j >= pos; j--) {
          ans[a[j][1]] = cnt;
        }
        cnt++;
        pos = i + 1;
      }
      if (cnt == 3) {
        break;
      }
    }
    return ans;
  }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector<int> p0, bool hasAnswer,
                        vector<int> p1) {
  cout << "Test " << testNum << ": ["
       << "{";
  for (int i = 0; int(p0.size()) > i; ++i) {
    if (i > 0) {
      cout << ",";
    }
    cout << p0[i];
  }
  cout << "}";
  cout << "]" << endl;
  RedGreenBlueLight *obj;
  vector<int> answer;
  obj = new RedGreenBlueLight();
  clock_t startTime = clock();
  answer = obj->move(p0);
  clock_t endTime = clock();
  delete obj;
  bool res;
  res = true;
  cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds"
       << endl;
  if (hasAnswer) {
    cout << "Desired answer:" << endl;
    cout << "\t"
         << "{";
    for (int i = 0; int(p1.size()) > i; ++i) {
      if (i > 0) {
        cout << ",";
      }
      cout << p1[i];
    }
    cout << "}" << endl;
  }
  cout << "Your answer:" << endl;
  cout << "\t"
       << "{";
  for (int i = 0; int(answer.size()) > i; ++i) {
    if (i > 0) {
      cout << ",";
    }
    cout << answer[i];
  }
  cout << "}" << endl;
  if (hasAnswer) {
    if (answer.size() != p1.size()) {
      res = false;
    } else {
      for (int i = 0; int(answer.size()) > i; ++i) {
        if (answer[i] != p1[i]) {
          res = false;
        }
      }
    }
  }
  if (!res) {
    cout << "DOESN'T MATCH!!!!" << endl;
  } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
    cout << "FAIL the timeout" << endl;
    res = false;
  } else if (hasAnswer) {
    cout << "Match :-)" << endl;
  } else {
    cout << "OK, but is it right?" << endl;
  }
  cout << "" << endl;
  return res;
}
int main() {
  bool all_right;
  all_right = true;

  vector<int> p0;
  vector<int> p1;

  {
    // ----- test 0 -----
    int t0[] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    int t1[] = {0, 2, 2, 1, 0, 2, 0, 0, 2, 1};
    p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
    // ------------------
  }

  {
    // ----- test 1 -----
    int t0[] = {11, 11, 11, 11, 11, 11, 11, 11, 11, 11};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    int t1[] = {-1};
    p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
    // ------------------
  }

  {
    // ----- test 2 -----
    int t0[] = {7, 8, 9, 7, 7, 8, 9, 8, 7, 9, 7, 7, 8, 8};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    int t1[] = {-1};
    p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
    // ------------------
  }

  {
    // ----- test 3 -----
    int t0[] = {1, 2, 3, 4, 5, 6, 7, 999888777, 2, 3, 4, 5, 2,
                3, 2, 9, 1, 7, 2, 3, 4,         5, 6, 7, 15};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    int t1[] = {2, 0, 1, 1, 0, 2, 1, 2, 0, 2, 1, 1, 0,
                2, 0, 2, 1, 0, 1, 0, 2, 1, 2, 2, 1};
    p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
    // ------------------
  }

  {
    // ----- test 4 -----
    int t0[] = {2, 2, 2, 2, 2, 3, 2, 3, 2, 2, 3};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    int t1[] = {0, 0, 0, 1, 1, 2, 1, 2, 2, 2, 2};
    p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
    // ------------------
  }

  if (all_right) {
    cout << "You're a stud (at least on the example cases)!" << endl;
  } else {
    cout << "Some of the test cases had errors." << endl;
  }
  return 0;
}
// END KAWIGIEDIT TESTING
