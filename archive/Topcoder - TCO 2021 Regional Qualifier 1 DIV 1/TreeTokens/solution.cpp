#include <bits/stdc++.h>

using namespace std;

const int MOD = 1e9 + 7;

class TreeTokens {
public:
  int placeMax(int N, int G, int L, int seed) {
    long long state = seed;
    vector<vector<int>> t(N);
    for (int i = 1; i <= N - 1; i++) {
      state = (state * 1103515245 + 12345) % (1LL << 31);
      int tmp = (state / 1000) % L;
      int p = max(0, i - 1 - tmp);
      t[i].push_back(p);
      t[p].push_back(i);
    }
    vector<int> deepest_child(N);
    for (int i = 0; i < N; i++) {
      deepest_child[i] = i;
    }
    function<int(int, int)> cal_depth = [&](int u, int l) {
      int mx = 0;
      for (int v : t[u]) {
        if (v != l) {
          int d = cal_depth(v, u);
          if (d > mx) {
            mx = d;
            deepest_child[u] = v;
          }
        }
      }
      return mx + 1;
    };
    for (int u : t[G]) {
      cal_depth(u, G);
    }
    int ans = 0;
    function<void(int, int, int)> dfs = [&](int u, int l, int c) {
      if (t[u].size() == 1) {
        ans = (ans + c) % MOD;
      }
      for (int v : t[u]) {
        if (v != l) {
          if (v != deepest_child[u]) {
            dfs(v, u, 1);
          } else {
            dfs(v, u, (1LL * c * 2 + 1) % MOD);
          }
        }
      }
    };
    for (int u : t[G]) {
      dfs(u, G, 1);
    }
    return ans;
  }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, bool hasAnswer, int p4) {
  cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3;
  cout << "]" << endl;
  TreeTokens *obj;
  int answer;
  obj = new TreeTokens();
  clock_t startTime = clock();
  answer = obj->placeMax(p0, p1, p2, p3);
  clock_t endTime = clock();
  delete obj;
  bool res;
  res = true;
  cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
  if (hasAnswer) {
    cout << "Desired answer:" << endl;
    cout << "\t" << p4 << endl;
  }
  cout << "Your answer:" << endl;
  cout << "\t" << answer << endl;
  if (hasAnswer) {
    res = answer == p4;
  }
  if (!res) {
    cout << "DOESN'T MATCH!!!!" << endl;
  } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
    cout << "FAIL the timeout" << endl;
    res = false;
  } else if (hasAnswer) {
    cout << "Match :-)" << endl;
  } else {
    cout << "OK, but is it right?" << endl;
  }
  cout << "" << endl;
  return res;
}
int main() {
  bool all_right;
  all_right = true;

  int p0;
  int p1;
  int p2;
  int p3;
  int p4;

  {
    // ----- test 0 -----
    p0 = 5;
    p1 = 0;
    p2 = 1000000;
    p3 = 1234567;
    p4 = 4;
    all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
    // ------------------
  }

  {
    // ----- test 1 -----
    p0 = 5;
    p1 = 4;
    p2 = 1;
    p3 = 1234567;
    p4 = 15;
    all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
    // ------------------
  }

  {
    // ----- test 2 -----
    p0 = 4;
    p1 = 0;
    p2 = 2;
    p3 = 4742;
    p4 = 4;
    all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
    // ------------------
  }

  {
    // ----- test 3 -----
    p0 = 7;
    p1 = 5;
    p2 = 3;
    p3 = 47;
    p4 = 17;
    all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
    // ------------------
  }

  {
    // ----- test 3 -----
    p0 = 1;
    p1 = 0;
    p2 = 291;
    p3 = 47;
    p4 = 0;
    all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
    // ------------------
  }
  if (all_right) {
    cout << "You're a stud (at least on the example cases)!" << endl;
  } else {
    cout << "Some of the test cases had errors." << endl;
  }
  return 0;
}
// END KAWIGIEDIT TESTING
